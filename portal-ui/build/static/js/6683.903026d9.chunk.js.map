{"version":3,"file":"static/js/6683.903026d9.chunk.js","mappings":"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","sources":["screens/Console/Common/FormComponents/FileSelector/FileSelector.tsx","screens/Console/Common/FormComponents/FileSelector/utils.ts","screens/Console/Common/FormComponents/RadioGroupSelector/RadioGroupSelector.tsx","screens/Console/Common/ModalWrapper/ConfirmDialog.tsx","icons/CertificateIcon.tsx","screens/Console/Common/TLSCertificate/TLSCertificate.tsx","screens/Console/Common/UsageBarWrapper/StackRow.tsx","screens/Console/Tenants/TenantDetails/TenantEncryption.tsx","screens/shared/ErrorBlock.tsx","../node_modules/@mui/icons-material/RemoveRedEye.js","../node_modules/@mui/icons-material/VisibilityOff.js","../node_modules/@mui/material/Stack/Stack.js"],"sourcesContent":["// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { useState } from \"react\";\nimport get from \"lodash/get\";\nimport { Grid, InputLabel, Tooltip } from \"@mui/material\";\nimport IconButton from \"@mui/material/IconButton\";\nimport AttachFileIcon from \"@mui/icons-material/AttachFile\";\nimport CancelIcon from \"@mui/icons-material/Cancel\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport {\n  fieldBasic,\n  fileInputStyles,\n  tooltipHelper,\n} from \"../common/styleLibrary\";\nimport { fileProcess } from \"./utils\";\nimport HelpIcon from \"../../../../../icons/HelpIcon\";\nimport ErrorBlock from \"../../../../shared/ErrorBlock\";\n\ninterface InputBoxProps {\n  label: string;\n  classes: any;\n  onChange: (e: string, i: string) => void;\n  id: string;\n  name: string;\n  disabled?: boolean;\n  tooltip?: string;\n  required?: boolean;\n  error?: string;\n  accept?: string;\n  value?: string;\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    ...fieldBasic,\n    ...tooltipHelper,\n    valueString: {\n      maxWidth: 350,\n      whiteSpace: \"nowrap\",\n      overflow: \"hidden\",\n      textOverflow: \"ellipsis\",\n      marginTop: 2,\n    },\n    fileInputField: {\n      margin: \"13px 0\",\n      \"@media (max-width: 900px)\": {\n        flexFlow: \"column\",\n      },\n    },\n    ...fileInputStyles,\n    inputLabel: {\n      ...fieldBasic.inputLabel,\n      fontWeight: \"normal\",\n    },\n    textBoxContainer: {\n      ...fieldBasic.textBoxContainer,\n      maxWidth: \"100%\",\n      border: \"1px solid #eaeaea\",\n      paddingLeft: \"15px\",\n    },\n  });\n\nconst FileSelector = ({\n  label,\n  classes,\n  onChange,\n  id,\n  name,\n  disabled = false,\n  tooltip = \"\",\n  required,\n  error = \"\",\n  accept = \"\",\n  value = \"\",\n}: InputBoxProps) => {\n  const [showFileSelector, setShowSelector] = useState(false);\n\n  return (\n    <React.Fragment>\n      <Grid\n        item\n        xs={12}\n        className={`${classes.fileInputField} ${classes.fieldBottom} ${\n          classes.fieldContainer\n        } ${error !== \"\" ? classes.errorInField : \"\"}`}\n      >\n        {label !== \"\" && (\n          <InputLabel\n            htmlFor={id}\n            className={`${error !== \"\" ? classes.fieldLabelError : \"\"} ${\n              classes.inputLabel\n            }`}\n          >\n            <span>\n              {label}\n              {required ? \"*\" : \"\"}\n            </span>\n            {tooltip !== \"\" && (\n              <div className={classes.tooltipContainer}>\n                <Tooltip title={tooltip} placement=\"top-start\">\n                  <div className={classes.tooltip}>\n                    <HelpIcon />\n                  </div>\n                </Tooltip>\n              </div>\n            )}\n          </InputLabel>\n        )}\n\n        {showFileSelector || value === \"\" ? (\n          <div className={classes.textBoxContainer}>\n            <input\n              type=\"file\"\n              name={name}\n              onChange={(e) => {\n                const fileName = get(e, \"target.files[0].name\", \"\");\n                fileProcess(e, (data: any) => {\n                  onChange(data, fileName);\n                });\n              }}\n              accept={accept}\n              required={required}\n              disabled={disabled}\n              className={classes.fileInputField}\n            />\n\n            {value !== \"\" && (\n              <IconButton\n                color=\"primary\"\n                aria-label=\"upload picture\"\n                component=\"span\"\n                onClick={() => {\n                  setShowSelector(false);\n                }}\n                disableRipple={false}\n                disableFocusRipple={false}\n                size=\"small\"\n              >\n                <CancelIcon />\n              </IconButton>\n            )}\n\n            {error !== \"\" && <ErrorBlock errorMessage={error} />}\n          </div>\n        ) : (\n          <div className={classes.fileReselect}>\n            <div className={classes.valueString}>{value}</div>\n            <IconButton\n              color=\"primary\"\n              aria-label=\"upload picture\"\n              component=\"span\"\n              onClick={() => {\n                setShowSelector(true);\n              }}\n              disableRipple={false}\n              disableFocusRipple={false}\n              size=\"small\"\n            >\n              <AttachFileIcon />\n            </IconButton>\n          </div>\n        )}\n      </Grid>\n    </React.Fragment>\n  );\n};\n\nexport default withStyles(styles)(FileSelector);\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nexport const fileProcess = (evt: any, callback: any) => {\n  const file = evt.target.files[0];\n  const reader = new FileReader();\n  reader.readAsDataURL(file);\n\n  reader.onload = () => {\n    // reader.readAsDataURL(file) output will be something like: data:application/x-x509-ca-cert;base64,LS0tLS1CRUdJTiBDRVJUSU\n    // we care only about the actual base64 part (everything after \"data:application/x-x509-ca-cert;base64,\")\n    const fileBase64 = reader.result;\n    if (fileBase64) {\n      const fileArray = fileBase64.toString().split(\"base64,\");\n\n      if (fileArray.length === 2) {\n        callback(fileArray[1]);\n      }\n    }\n  };\n};\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\nimport React from \"react\";\nimport clsx from \"clsx\";\nimport Grid from \"@mui/material/Grid\";\nimport RadioGroup from \"@mui/material/RadioGroup\";\nimport FormControlLabel from \"@mui/material/FormControlLabel\";\nimport Radio, { RadioProps } from \"@mui/material/Radio\";\nimport { InputLabel, Tooltip } from \"@mui/material\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport makeStyles from \"@mui/styles/makeStyles\";\nimport { fieldBasic, radioIcons, tooltipHelper } from \"../common/styleLibrary\";\nimport HelpIcon from \"../../../../../icons/HelpIcon\";\n\nexport interface SelectorTypes {\n  label: string;\n  value: string;\n}\n\ninterface RadioGroupProps {\n  selectorOptions: SelectorTypes[];\n  currentSelection: string;\n  label: string;\n  id: string;\n  name: string;\n  tooltip?: string;\n  disableOptions?: boolean;\n  onChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\n  classes: any;\n  displayInColumn?: boolean;\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    ...fieldBasic,\n    ...tooltipHelper,\n    optionLabel: {\n      \"&.Mui-disabled\": {\n        \"& .MuiFormControlLabel-label\": {\n          color: \"#9c9c9c\",\n        },\n      },\n      \"&:last-child\": {\n        marginRight: 0,\n      },\n      \"& .MuiFormControlLabel-label\": {\n        fontSize: 12,\n        color: \"#07193E\",\n      },\n    },\n    checkedOption: {\n      \"& .MuiFormControlLabel-label\": {\n        fontSize: 12,\n        color: \"#07193E\",\n        fontWeight: 700,\n      },\n    },\n  });\n\nconst radioStyles = makeStyles({\n  root: {\n    \"&:hover\": {\n      backgroundColor: \"transparent\",\n    },\n  },\n  ...radioIcons,\n});\n\nconst RadioButton = (props: RadioProps) => {\n  const classes = radioStyles();\n\n  return (\n    <Radio\n      className={classes.root}\n      disableRipple\n      color=\"default\"\n      checkedIcon={<span className={classes.radioSelectedIcon} />}\n      icon={<span className={classes.radioUnselectedIcon} />}\n      {...props}\n    />\n  );\n};\n\nexport const RadioGroupSelector = ({\n  selectorOptions = [],\n  currentSelection,\n  label,\n  id,\n  name,\n  onChange,\n  tooltip = \"\",\n  disableOptions = false,\n  classes,\n  displayInColumn = false,\n}: RadioGroupProps) => {\n  return (\n    <Grid container alignItems={\"center\"}>\n      <Grid item xs>\n        <InputLabel htmlFor={id} className={classes.inputLabel}>\n          <span>{label}</span>\n          {tooltip !== \"\" && (\n            <div className={classes.tooltipContainer}>\n              <Tooltip title={tooltip} placement=\"top-start\">\n                <div>\n                  <HelpIcon />\n                </div>\n              </Tooltip>\n            </div>\n          )}\n        </InputLabel>\n      </Grid>\n      <Grid item xs className={classes.radioOptionsLayout}>\n        <RadioGroup\n          aria-label={id}\n          id={id}\n          name={name}\n          value={currentSelection}\n          onChange={onChange}\n          row={!displayInColumn}\n          style={{ display: \"block\", textAlign: \"right\" }}\n        >\n          {selectorOptions.map((selectorOption) => {\n            return (\n              <FormControlLabel\n                key={`rd-${name}-${selectorOption.value}`}\n                value={selectorOption.value}\n                control={<RadioButton />}\n                label={selectorOption.label}\n                disabled={disableOptions}\n                className={clsx(classes.optionLabel, {\n                  [classes.checkedOption]:\n                    selectorOption.value === currentSelection,\n                })}\n              />\n            );\n          })}\n        </RadioGroup>\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default withStyles(styles)(RadioGroupSelector);\n","import React from \"react\";\nimport {\n  Button,\n  ButtonProps,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogTitle,\n} from \"@mui/material\";\nimport { LoadingButton } from \"@mui/lab\";\nimport IconButton from \"@mui/material/IconButton\";\nimport CloseIcon from \"@mui/icons-material/Close\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport { deleteDialogStyles } from \"../FormComponents/common/styleLibrary\";\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    ...deleteDialogStyles,\n  });\n\ntype ConfirmDialogProps = {\n  isOpen?: boolean;\n  onClose: () => void;\n  onCancel?: () => void;\n  onConfirm: () => void;\n  classes?: any;\n  title: string;\n  isLoading?: boolean;\n  confirmationContent: React.ReactNode | React.ReactNode[];\n  cancelText?: string;\n  confirmText?: string;\n  confirmButtonProps?: Partial<ButtonProps>;\n  cancelButtonProps?: Partial<ButtonProps>;\n  titleIcon?: React.ReactNode;\n};\n\nconst ConfirmDialog = ({\n  isOpen = false,\n  onClose,\n  onCancel,\n  onConfirm,\n  classes = {},\n  title = \"\",\n  isLoading,\n  confirmationContent,\n  cancelText = \"Cancel\",\n  confirmText = \"Confirm\",\n  confirmButtonProps = {},\n  cancelButtonProps = {},\n  titleIcon = null,\n}: ConfirmDialogProps) => {\n  return (\n    <Dialog\n      open={isOpen}\n      onClose={(event, reason) => {\n        if (reason !== \"backdropClick\") {\n          onClose(); // close on Esc but not on click outside\n        }\n      }}\n      className={classes.root}\n      sx={{\n        \"& .MuiPaper-root\": {\n          padding: \"1rem 2rem 2rem 1rem\",\n        },\n      }}\n    >\n      <DialogTitle className={classes.title}>\n        <div className={classes.titleText}>\n          {titleIcon} {title}\n        </div>\n        <div className={classes.closeContainer}>\n          <IconButton\n            aria-label=\"close\"\n            className={classes.closeButton}\n            onClick={onClose}\n            disableRipple\n            size=\"small\"\n          >\n            <CloseIcon />\n          </IconButton>\n        </div>\n      </DialogTitle>\n\n      <DialogContent className={classes.content}>\n        {confirmationContent}\n      </DialogContent>\n      <DialogActions className={classes.actions}>\n        <Button\n          className={classes.cancelButton}\n          onClick={onCancel || onClose}\n          disabled={isLoading}\n          type=\"button\"\n          {...cancelButtonProps}\n          variant=\"outlined\"\n          color=\"primary\"\n          id={\"confirm-cancel\"}\n        >\n          {cancelText}\n        </Button>\n\n        <LoadingButton\n          className={classes.confirmButton}\n          type=\"button\"\n          onClick={onConfirm}\n          loading={isLoading}\n          disabled={isLoading}\n          variant=\"outlined\"\n          color=\"secondary\"\n          loadingPosition=\"start\"\n          startIcon={<React.Fragment />}\n          autoFocus\n          id={\"confirm-ok\"}\n          {...confirmButtonProps}\n        >\n          {confirmText}\n        </LoadingButton>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\nexport default withStyles(styles)(ConfirmDialog);\n","// This file is part of MinIO Console Server\n// Copyright (c) 2022 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport * as React from \"react\";\nimport { SVGProps } from \"react\";\n\nconst CertificateIcon = (props: SVGProps<SVGSVGElement>) => {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      className={`min-icon`}\n      fill={\"currentcolor\"}\n      viewBox=\"0 0 256 256\"\n      {...props}\n    >\n      <defs>\n        <clipPath id=\"certificate_svg__a\">\n          <path\n            data-name=\"Rect\\xE1ngulo 2156\"\n            fill=\"#07193e\"\n            d=\"M0 0h256v222.048H0z\"\n          />\n        </clipPath>\n      </defs>\n      <g\n        data-name=\"Grupo 4763\"\n        transform=\"translate(0 17)\"\n        clipPath=\"url(#certificate_svg__a)\"\n        fill=\"#07193e\"\n      >\n        <path\n          data-name=\"Trazado 8152\"\n          d=\"M240-.002H16a16 16 0 0 0-16 16v160a16 16 0 0 0 16 16h120l4.64-5.6 7.44-9.12A66.72 66.72 0 0 1 256 98.958v-82.96a16 16 0 0 0-16-16m-130.96 149.7H47.3a7.3 7.3 0 1 1 0-14.592h61.74a7.3 7.3 0 1 1 0 14.592m0-56H47.3a7.3 7.3 0 1 1 0-14.592h61.74a7.3 7.3 0 0 1 0 14.592m66.96-39.3a6.419 6.419 0 0 1-6.4 6.4H46.4a6.419 6.419 0 0 1-6.4-6.4v-1.792a6.419 6.419 0 0 1 6.4-6.4h123.2a6.419 6.419 0 0 1 6.4 6.4Z\"\n        />\n        <path\n          data-name=\"Trazado 8153\"\n          d=\"M256 137.486a50.96 50.96 0 1 0-86.16 36.72l-15.52 18.96 7.2 28.88 29.28-35.68a50.018 50.018 0 0 0 28.4 0l29.28 35.68 7.2-28.88-15.52-18.96a50.75 50.75 0 0 0 15.84-36.72m-50.928 29.688a29.688 29.688 0 0 1-.072-59.376h.072a29.688 29.688 0 0 1 0 59.376\"\n        />\n      </g>\n      <path data-name=\"Rect\\xE1ngulo 2157\" fill=\"none\" d=\"M0 0h256v256H0z\" />\n    </svg>\n  );\n};\nexport default CertificateIcon;\n","// This file is part of MinIO Console Server\n// Copyright (c) 2022 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React from \"react\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport { ICertificateInfo } from \"../../Tenants/types\";\nimport LanguageIcon from \"@mui/icons-material/Language\";\nimport Chip from \"@mui/material/Chip\";\nimport {\n  Typography,\n  Divider,\n  Box,\n  Grid,\n  Container,\n  ListItemText,\n  List,\n  ListItem,\n  ListItemAvatar,\n} from \"@mui/material\";\nimport EventBusyIcon from \"@mui/icons-material/EventBusy\";\nimport Moment from \"react-moment\";\nimport CertificateIcon from \"../../../../icons/CertificateIcon\";\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    root: {\n      padding: 0,\n      margin: 0,\n      border: 0,\n      backgroundColor: \"transparent\",\n      textDecoration: \"underline\",\n      cursor: \"pointer\",\n      fontSize: \"inherit\",\n      color: theme.palette.info.main,\n      fontFamily: \"Lato, sans-serif\",\n    },\n    certificateIcon: {\n      float: \"left\",\n      paddingTop: \"5px !important\",\n      paddingRight: \"10px !important\",\n    },\n    certificateInfo: { float: \"right\" },\n    certificateWrapper: {\n      height: \"auto\",\n      margin: 5,\n      border: \"1px solid #E2E2E2\",\n      userSelect: \"text\",\n      borderRadius: 4,\n      \"& h6\": {\n        fontWeight: \"bold\",\n      },\n      \"& div\": {\n        padding: 0,\n      },\n    },\n    certificateExpiry: {\n      color: \"#616161\",\n      display: \"flex\",\n      alignItems: \"center\",\n      flexWrap: \"wrap\",\n      marginBottom: 5,\n      \"& .label\": {\n        fontWeight: \"bold\",\n      },\n    },\n    certificateDomains: {\n      color: \"#616161\",\n      \"& .label\": {\n        fontWeight: \"bold\",\n      },\n    },\n    certificatesList: {\n      border: \"1px solid #E2E2E2\",\n      borderRadius: 4,\n      color: \"#616161\",\n      textTransform: \"lowercase\",\n      overflowY: \"scroll\",\n      maxHeight: 145,\n      marginBottom: 10,\n    },\n    certificatesListItem: {\n      padding: \"0px 16px\",\n      borderBottom: \"1px solid #E2E2E2\",\n      \"& div\": {\n        minWidth: 0,\n      },\n      \"& svg\": {\n        fontSize: 12,\n        marginRight: 10,\n        opacity: 0.5,\n      },\n      \"& span\": {\n        fontSize: 12,\n      },\n    },\n  });\n\ninterface ITLSCertificate {\n  classes: any;\n  certificateInfo: ICertificateInfo;\n  onDelete: any;\n}\n\nconst TLSCertificate = ({\n  classes,\n  certificateInfo,\n  onDelete = () => {},\n}: ITLSCertificate) => {\n  const certificates = certificateInfo.domains || [];\n  return (\n    <Chip\n      key={certificateInfo.name}\n      variant=\"outlined\"\n      color=\"primary\"\n      className={classes.certificateWrapper}\n      label={\n        <Container>\n          <Grid item xs={1} className={classes.certificateIcon}>\n            <CertificateIcon />\n          </Grid>\n          <Grid item xs={11} className={classes.certificateInfo}>\n            <Typography variant=\"subtitle1\" display=\"block\" gutterBottom>\n              {certificateInfo.name}\n            </Typography>\n            <Box className={classes.certificateExpiry}>\n              <EventBusyIcon color=\"inherit\" fontSize=\"small\" />\n              &nbsp;\n              <span className={\"label\"}>Expiry:&nbsp;</span>\n              <span>\n                <Moment format=\"YYYY/MM/DD\">{certificateInfo.expiry}</Moment>\n              </span>\n            </Box>\n            <Divider />\n            <br />\n            <Box className={classes.certificateDomains}>\n              <span className=\"label\">{`${certificates.length} Domain (s):`}</span>\n            </Box>\n            <List className={classes.certificatesList}>\n              {certificates.map((dom) => (\n                <ListItem className={classes.certificatesListItem}>\n                  <ListItemAvatar>\n                    <LanguageIcon />\n                  </ListItemAvatar>\n                  <ListItemText primary={dom} />\n                </ListItem>\n              ))}\n            </List>\n          </Grid>\n        </Container>\n      }\n      onDelete={onDelete}\n    />\n  );\n};\n\nexport default withStyles(styles)(TLSCertificate);\n","import React from \"react\";\nimport { Stack } from \"@mui/material\";\n\nconst StackRow = ({\n  children = null,\n  ...restProps\n}: {\n  children?: any;\n  [x: string]: any;\n}) => {\n  return (\n    <Stack\n      direction={{ xs: \"column\", sm: \"row\" }}\n      justifyContent=\"space-between\"\n      margin={\"5px 0 5px 0\"}\n      spacing={{ xs: 1, sm: 2, md: 4 }}\n      {...restProps}\n    >\n      {children}\n    </Stack>\n  );\n};\nexport default StackRow;\n","// This file is part of MinIO Console Server\n// Copyright (c) 2022 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport { ITenant } from \"../ListTenants/types\";\nimport {\n  ICertificateInfo,\n  ISecurityContext,\n  ITenantEncryptionResponse,\n} from \"../types\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport {\n  containerForHeader,\n  createTenantCommon,\n  formFieldStyles,\n  modalBasic,\n  spacingUtils,\n  tenantDetailsStyles,\n  wizardCommon,\n} from \"../../Common/FormComponents/common/styleLibrary\";\nimport React, { Fragment, useEffect, useState } from \"react\";\nimport { setErrorSnackMessage } from \"../../../../actions\";\nimport { connect } from \"react-redux\";\nimport { AppState } from \"../../../../store\";\nimport { setTenantDetailsLoad } from \"../actions\";\nimport api from \"../../../../common/api\";\nimport { ErrorResponseHandler } from \"../../../../common/types\";\n\nimport FormSwitchWrapper from \"../../Common/FormComponents/FormSwitchWrapper/FormSwitchWrapper\";\nimport Grid from \"@mui/material/Grid\";\nimport FileSelector from \"../../Common/FormComponents/FileSelector/FileSelector\";\nimport InputBoxWrapper from \"../../Common/FormComponents/InputBoxWrapper/InputBoxWrapper\";\nimport RadioGroupSelector from \"../../Common/FormComponents/RadioGroupSelector/RadioGroupSelector\";\nimport { Button, DialogContentText, Stack } from \"@mui/material\";\nimport VisibilityOffIcon from \"@mui/icons-material/VisibilityOff\";\nimport RemoveRedEyeIcon from \"@mui/icons-material/RemoveRedEye\";\nimport { KeyPair } from \"../ListTenants/utils\";\nimport { clearValidationError } from \"../utils\";\nimport {\n  commonFormValidation,\n  IValidation,\n} from \"../../../../utils/validationFunctions\";\nimport ConfirmDialog from \"../../Common/ModalWrapper/ConfirmDialog\";\nimport TLSCertificate from \"../../Common/TLSCertificate/TLSCertificate\";\nimport StackRow from \"../../Common/UsageBarWrapper/StackRow\";\n\ninterface ITenantEncryption {\n  classes: any;\n  loadingTenant: boolean;\n  tenant: ITenant | null;\n  setErrorSnackMessage: typeof setErrorSnackMessage;\n  setTenantDetailsLoad: typeof setTenantDetailsLoad;\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    ...tenantDetailsStyles,\n    ...spacingUtils,\n    loaderAlign: {\n      textAlign: \"center\",\n    },\n    title: {\n      marginTop: 35,\n    },\n    bold: { fontWeight: \"bold\" },\n    italic: { fontStyle: \"italic\" },\n    paperContainer: {\n      padding: \"15px 15px 15px 50px\",\n    },\n    certificateInfo: {\n      height: \"auto\",\n      margin: 5,\n    },\n    fileItem: {\n      marginRight: 10,\n      display: \"flex\",\n      \"& div label\": {\n        minWidth: 50,\n      },\n\n      \"@media (max-width: 900px)\": {\n        flexFlow: \"column\",\n      },\n    },\n    certInputRow: {\n      display: \"flex\",\n      alignItems: \"center\",\n      borderBottom: \"1px solid #eaeaea\",\n      marginBottom: 8,\n    },\n    caCertsRow: {\n      borderBottom: \"1px solid #eaeaea\",\n      display: \"flex\",\n      alignItems: \"center\",\n      marginBottom: 8,\n    },\n    ...containerForHeader(theme.spacing(4)),\n    ...createTenantCommon,\n    ...formFieldStyles,\n    ...modalBasic,\n    ...wizardCommon,\n  });\n\nconst TenantEncryption = ({\n  classes,\n  tenant,\n  setErrorSnackMessage,\n}: ITenantEncryption) => {\n  const [encryptionEnabled, setEncryptionEnabled] = useState<boolean>(false);\n  const [encryptionType, setEncryptionType] = useState<string>(\"vault\");\n  const [replicas, setReplicas] = useState<string>(\"2\");\n  const [image, setImage] = useState<string>(\"\");\n  const [refreshEncryptionInfo, setRefreshEncryptionInfo] =\n    useState<boolean>(false);\n  const [securityContext, setSecurityContext] = useState<ISecurityContext>({\n    fsGroup: \"1000\",\n    runAsGroup: \"1000\",\n    runAsNonRoot: true,\n    runAsUser: \"1000\",\n  });\n  const [vaultConfiguration, setVaultConfiguration] = useState<any>(null);\n  const [awsConfiguration, setAWSConfiguration] = useState<any>(null);\n  const [gemaltoConfiguration, setGemaltoConfiguration] = useState<any>(null);\n  const [azureConfiguration, setAzureConfiguration] = useState<any>(null);\n  const [gcpConfiguration, setGCPConfiguration] = useState<any>(null);\n  const [enabledCustomCertificates, setEnabledCustomCertificates] =\n    useState<boolean>(false);\n  const [updatingEncryption, setUpdatingEncryption] = useState<boolean>(false);\n  const [serverTLSCertificateSecret, setServerTLSCertificateSecret] =\n    useState<ICertificateInfo | null>(null);\n  const [mTLSCertificateSecret, setMTLSCertificateSecret] =\n    useState<ICertificateInfo | null>(null);\n  const [mTLSCertificate, setMTLSCertificate] = useState<KeyPair | null>(null);\n  const [certificatesToBeRemoved, setCertificatesToBeRemoved] = useState<\n    string[]\n  >([]);\n  const [showVaultAppRoleID, setShowVaultAppRoleID] = useState<boolean>(false);\n  const [isFormValid, setIsFormValid] = useState<boolean>(false);\n  const [showVaultAppRoleSecret, setShowVaultAppRoleSecret] =\n    useState<boolean>(false);\n  const [vaultClientCertificateSecret, setVaultClientCertificateSecret] =\n    useState<ICertificateInfo | null>(null);\n  const [vaultCACertificateSecret, setVaultCACertificateSecret] =\n    useState<ICertificateInfo | null>(null);\n  const [vaultClientCertificate, setVaultClientCertificate] =\n    useState<KeyPair | null>(null);\n  const [serverCertificate, setServerCertificate] = useState<KeyPair | null>(\n    null\n  );\n  const [vaultCACertificate, setVaultCACertificate] = useState<KeyPair | null>(\n    null\n  );\n  const [gemaltoCACertificateSecret, setGemaltoCACertificateSecret] =\n    useState<ICertificateInfo | null>(null);\n  const [gemaltoCACertificate, setGemaltotCACertificate] =\n    useState<KeyPair | null>(null);\n  const [validationErrors, setValidationErrors] = useState<any>({});\n  const cleanValidation = (fieldName: string) => {\n    setValidationErrors(clearValidationError(validationErrors, fieldName));\n  };\n  const [confirmOpen, setConfirmOpen] = useState<boolean>(false);\n\n  // Validation\n  useEffect(() => {\n    let encryptionValidation: IValidation[] = [];\n\n    if (encryptionEnabled) {\n      encryptionValidation = [\n        ...encryptionValidation,\n        {\n          fieldKey: \"replicas\",\n          required: true,\n          value: replicas,\n          customValidation: parseInt(replicas) < 1,\n          customValidationMessage: \"Replicas needs to be 1 or greater\",\n        },\n        {\n          fieldKey: \"kes_securityContext_runAsUser\",\n          required: true,\n          value: securityContext.runAsUser,\n          customValidation:\n            securityContext.runAsUser === \"\" ||\n            parseInt(securityContext.runAsUser) < 0,\n          customValidationMessage: `runAsUser must be present and be 0 or more`,\n        },\n        {\n          fieldKey: \"kes_securityContext_runAsGroup\",\n          required: true,\n          value: securityContext.runAsGroup,\n          customValidation:\n            securityContext.runAsGroup === \"\" ||\n            parseInt(securityContext.runAsGroup) < 0,\n          customValidationMessage: `runAsGroup must be present and be 0 or more`,\n        },\n        {\n          fieldKey: \"kes_securityContext_fsGroup\",\n          required: true,\n          value: securityContext.fsGroup,\n          customValidation:\n            securityContext.fsGroup === \"\" ||\n            parseInt(securityContext.fsGroup) < 0,\n          customValidationMessage: `fsGroup must be present and be 0 or more`,\n        },\n      ];\n\n      if (enabledCustomCertificates) {\n        encryptionValidation = [\n          ...encryptionValidation,\n          {\n            fieldKey: \"serverKey\",\n            required: false,\n            value: serverCertificate?.encoded_key || \"\",\n          },\n          {\n            fieldKey: \"serverCert\",\n            required: false,\n            value: serverCertificate?.encoded_cert || \"\",\n          },\n          {\n            fieldKey: \"clientKey\",\n            required: false,\n            value: mTLSCertificate?.encoded_key || \"\",\n          },\n          {\n            fieldKey: \"clientCert\",\n            required: false,\n            value: mTLSCertificate?.encoded_cert || \"\",\n          },\n        ];\n      }\n\n      if (encryptionType === \"vault\") {\n        encryptionValidation = [\n          ...encryptionValidation,\n          {\n            fieldKey: \"vault_endpoint\",\n            required: true,\n            value: vaultConfiguration?.endpoint,\n          },\n          {\n            fieldKey: \"vault_id\",\n            required: true,\n            value: vaultConfiguration?.approle?.id,\n          },\n          {\n            fieldKey: \"vault_secret\",\n            required: true,\n            value: vaultConfiguration?.approle?.secret,\n          },\n          {\n            fieldKey: \"vault_ping\",\n            required: false,\n            value: vaultConfiguration?.status?.ping,\n            customValidation: parseInt(vaultConfiguration?.status?.ping) < 0,\n            customValidationMessage: \"Value needs to be 0 or greater\",\n          },\n          {\n            fieldKey: \"vault_retry\",\n            required: false,\n            value: vaultConfiguration?.approle?.retry,\n            customValidation: parseInt(vaultConfiguration?.approle?.retry) < 0,\n            customValidationMessage: \"Value needs to be 0 or greater\",\n          },\n        ];\n      }\n\n      if (encryptionType === \"aws\") {\n        encryptionValidation = [\n          ...encryptionValidation,\n          {\n            fieldKey: \"aws_endpoint\",\n            required: true,\n            value: awsConfiguration?.secretsmanager?.endpoint,\n          },\n          {\n            fieldKey: \"aws_region\",\n            required: true,\n            value: awsConfiguration?.secretsmanager?.region,\n          },\n          {\n            fieldKey: \"aws_accessKey\",\n            required: true,\n            value: awsConfiguration?.secretsmanager?.credentials?.accesskey,\n          },\n          {\n            fieldKey: \"aws_secretKey\",\n            required: true,\n            value: awsConfiguration?.secretsmanager?.credentials?.secretkey,\n          },\n        ];\n      }\n\n      if (encryptionType === \"gemalto\") {\n        encryptionValidation = [\n          ...encryptionValidation,\n          {\n            fieldKey: \"gemalto_endpoint\",\n            required: true,\n            value: gemaltoConfiguration?.keysecure?.endpoint,\n          },\n          {\n            fieldKey: \"gemalto_token\",\n            required: true,\n            value: gemaltoConfiguration?.keysecure?.credentials?.token,\n          },\n          {\n            fieldKey: \"gemalto_domain\",\n            required: true,\n            value: gemaltoConfiguration?.keysecure?.credentials?.domain,\n          },\n          {\n            fieldKey: \"gemalto_retry\",\n            required: false,\n            value: gemaltoConfiguration?.keysecure?.credentials?.retry,\n            customValidation:\n              parseInt(gemaltoConfiguration?.keysecure?.credentials?.retry) < 0,\n            customValidationMessage: \"Value needs to be 0 or greater\",\n          },\n        ];\n      }\n\n      if (encryptionType === \"azure\") {\n        encryptionValidation = [\n          ...encryptionValidation,\n          {\n            fieldKey: \"azure_endpoint\",\n            required: true,\n            value: azureConfiguration?.keyvault?.endpoint,\n          },\n          {\n            fieldKey: \"azure_tenant_id\",\n            required: true,\n            value: azureConfiguration?.keyvault?.credentials?.tenant_id,\n          },\n          {\n            fieldKey: \"azure_client_id\",\n            required: true,\n            value: azureConfiguration?.keyvault?.credentials?.client_id,\n          },\n          {\n            fieldKey: \"azure_client_secret\",\n            required: true,\n            value: azureConfiguration?.keyvault?.credentials?.client_secret,\n          },\n        ];\n      }\n    }\n\n    const commonVal = commonFormValidation(encryptionValidation);\n\n    setIsFormValid(Object.keys(commonVal).length === 0);\n\n    setValidationErrors(commonVal);\n  }, [\n    enabledCustomCertificates,\n    encryptionEnabled,\n    encryptionType,\n    serverCertificate?.encoded_key,\n    serverCertificate?.encoded_cert,\n    mTLSCertificate?.encoded_key,\n    mTLSCertificate?.encoded_cert,\n    vaultClientCertificate?.encoded_key,\n    vaultClientCertificate?.encoded_cert,\n    vaultCACertificate?.encoded_key,\n    vaultCACertificate?.encoded_cert,\n    securityContext,\n    vaultConfiguration,\n    awsConfiguration,\n    gemaltoConfiguration,\n    azureConfiguration,\n    gcpConfiguration,\n    replicas,\n  ]);\n\n  const fetchEncryptionInfo = () => {\n    if (!refreshEncryptionInfo) {\n      setRefreshEncryptionInfo(true);\n      api\n        .invoke(\n          \"GET\",\n          `/api/v1/namespaces/${tenant?.namespace}/tenants/${tenant?.name}/encryption`\n        )\n        .then((resp: ITenantEncryptionResponse) => {\n          if (resp.vault) {\n            setEncryptionType(\"vault\");\n            setVaultConfiguration(resp.vault);\n            if (resp.vault.tls) {\n              setVaultClientCertificateSecret(resp.vault.tls.crt);\n              setVaultCACertificateSecret(resp.vault.tls.ca);\n            }\n          } else if (resp.aws) {\n            setEncryptionType(\"aws\");\n            setAWSConfiguration(resp.aws);\n          } else if (resp.gemalto) {\n            setEncryptionType(\"gemalto\");\n            setGemaltoConfiguration(resp.gemalto);\n            if (resp.gemalto.keysecure.tls) {\n              setGemaltoCACertificateSecret(resp.gemalto.keysecure.tls.ca);\n            }\n          } else if (resp.gcp) {\n            setEncryptionType(\"gcp\");\n            setGCPConfiguration(resp.gcp);\n          } else if (resp.azure) {\n            setEncryptionType(\"azure\");\n            setAzureConfiguration(resp.azure);\n          }\n\n          setEncryptionEnabled(true);\n          setImage(resp.image);\n          setReplicas(resp.replicas);\n          if (resp.securityContext) {\n            setSecurityContext(resp.securityContext);\n          }\n          if (resp.server || resp.mtls_client) {\n            setEnabledCustomCertificates(true);\n          }\n          if (resp.server) {\n            setServerTLSCertificateSecret(resp.server);\n          }\n          if (resp.mtls_client) {\n            setMTLSCertificateSecret(resp.mtls_client);\n          }\n          setRefreshEncryptionInfo(false);\n        })\n        .catch((err: ErrorResponseHandler) => {\n          console.log(err);\n          setRefreshEncryptionInfo(false);\n        });\n    }\n  };\n\n  useEffect(() => {\n    fetchEncryptionInfo();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const removeCertificate = (certificateInfo: ICertificateInfo) => {\n    setCertificatesToBeRemoved([\n      ...certificatesToBeRemoved,\n      certificateInfo.name,\n    ]);\n    if (certificateInfo.name === serverTLSCertificateSecret?.name) {\n      setServerTLSCertificateSecret(null);\n    }\n    if (certificateInfo.name === mTLSCertificateSecret?.name) {\n      setMTLSCertificateSecret(null);\n    }\n    if (certificateInfo.name === vaultClientCertificateSecret?.name) {\n      setVaultClientCertificateSecret(null);\n    }\n    if (certificateInfo.name === vaultCACertificateSecret?.name) {\n      setVaultCACertificateSecret(null);\n    }\n    if (certificateInfo.name === gemaltoCACertificateSecret?.name) {\n      setGemaltoCACertificateSecret(null);\n    }\n  };\n\n  const updateEncryptionConfiguration = () => {\n    if (encryptionEnabled) {\n      let insertEncrypt = {};\n      switch (encryptionType) {\n        case \"gemalto\":\n          let gemaltoCAIntroduce = {};\n\n          if (gemaltoCACertificate?.encoded_cert) {\n            gemaltoCAIntroduce = {\n              tls: {\n                ca: gemaltoCACertificate?.encoded_cert,\n              },\n            };\n          }\n          insertEncrypt = {\n            gemalto: {\n              keysecure: {\n                endpoint: gemaltoConfiguration?.keysecure?.endpoint || \"\",\n                credentials: {\n                  token:\n                    gemaltoConfiguration?.keysecure?.credentials?.token || \"\",\n                  domain:\n                    gemaltoConfiguration?.keysecure?.credentials?.domain || \"\",\n                  retry: parseInt(\n                    gemaltoConfiguration?.keysecure?.credentials?.retry\n                  ),\n                },\n                ...gemaltoCAIntroduce,\n              },\n            },\n          };\n          break;\n        case \"aws\":\n          insertEncrypt = {\n            aws: {\n              secretsmanager: {\n                endpoint: awsConfiguration?.secretsmanager?.endpoint || \"\",\n                region: awsConfiguration?.secretsmanager?.region || \"\",\n                kmskey: awsConfiguration?.secretsmanager?.kmskey || \"\",\n                credentials: {\n                  accesskey:\n                    awsConfiguration?.secretsmanager?.credentials?.accesskey ||\n                    \"\",\n                  secretkey:\n                    awsConfiguration?.secretsmanager?.credentials?.secretkey ||\n                    \"\",\n                  token:\n                    awsConfiguration?.secretsmanager?.credentials?.token || \"\",\n                },\n              },\n            },\n          };\n          break;\n        case \"azure\":\n          insertEncrypt = {\n            azure: {\n              keyvault: {\n                endpoint: azureConfiguration?.keyvault?.endpoint || \"\",\n                credentials: {\n                  tenant_id:\n                    azureConfiguration?.keyvault?.credentials?.tenant_id || \"\",\n                  client_id:\n                    azureConfiguration?.keyvault?.credentials?.client_id || \"\",\n                  client_secret:\n                    azureConfiguration?.keyvault?.credentials?.client_secret ||\n                    \"\",\n                },\n              },\n            },\n          };\n          break;\n        case \"gcp\":\n          insertEncrypt = {\n            gcp: {\n              secretmanager: {\n                project_id: gcpConfiguration?.secretmanager?.project_id || \"\",\n                endpoint: gcpConfiguration?.secretmanager?.endpoint || \"\",\n                credentials: {\n                  client_email:\n                    gcpConfiguration?.secretmanager?.credentials\n                      ?.client_email || \"\",\n                  client_id:\n                    gcpConfiguration?.secretmanager?.credentials?.client_id ||\n                    \"\",\n                  private_key_id:\n                    gcpConfiguration?.secretmanager?.credentials\n                      ?.private_key_id || \"\",\n                  private_key:\n                    gcpConfiguration?.secretmanager?.credentials?.private_key ||\n                    \"\",\n                },\n              },\n            },\n          };\n          break;\n        case \"vault\":\n          let vaultKeyPair = null;\n          let vaultCAInsert = null;\n          if (\n            vaultClientCertificate?.encoded_key &&\n            vaultClientCertificate?.encoded_cert\n          ) {\n            vaultKeyPair = {\n              key: vaultClientCertificate?.encoded_key,\n              crt: vaultClientCertificate?.encoded_cert,\n            };\n          }\n          if (vaultCACertificate?.encoded_cert) {\n            vaultCAInsert = {\n              ca: vaultCACertificate?.encoded_cert,\n            };\n          }\n          let vaultTLS = null;\n          if (vaultKeyPair || vaultCAInsert) {\n            vaultTLS = {\n              tls: {\n                ...vaultKeyPair,\n                ...vaultCAInsert,\n              },\n            };\n          }\n          insertEncrypt = {\n            vault: {\n              endpoint: vaultConfiguration?.endpoint || \"\",\n              engine: vaultConfiguration?.engine || \"\",\n              namespace: vaultConfiguration?.namespace || \"\",\n              prefix: vaultConfiguration?.prefix || \"\",\n              approle: {\n                engine: vaultConfiguration?.approle?.engine || \"\",\n                id: vaultConfiguration?.approle?.id || \"\",\n                secret: vaultConfiguration?.approle?.secret || \"\",\n                retry: parseInt(vaultConfiguration?.approle?.retry),\n              },\n              ...vaultTLS,\n              status: {\n                ping: parseInt(vaultConfiguration?.status?.ping),\n              },\n            },\n          };\n          break;\n      }\n\n      let encryptionServerKeyPair: any = {};\n      let encryptionClientKeyPair: any = {};\n\n      if (mTLSCertificate?.encoded_key && mTLSCertificate?.encoded_cert) {\n        encryptionClientKeyPair = {\n          client: {\n            key: mTLSCertificate?.encoded_key,\n            crt: mTLSCertificate?.encoded_cert,\n          },\n        };\n      }\n\n      if (serverCertificate?.encoded_key && serverCertificate?.encoded_cert) {\n        encryptionServerKeyPair = {\n          server: {\n            key: serverCertificate?.encoded_key,\n            crt: serverCertificate?.encoded_cert,\n          },\n        };\n      }\n      const dataSend = {\n        secretsToBeDeleted: certificatesToBeRemoved || [],\n        replicas: replicas,\n        securityContext: securityContext,\n        image: image,\n        ...encryptionClientKeyPair,\n        ...encryptionServerKeyPair,\n        ...insertEncrypt,\n      };\n      if (!updatingEncryption) {\n        setUpdatingEncryption(true);\n        api\n          .invoke(\n            \"PUT\",\n            `/api/v1/namespaces/${tenant?.namespace}/tenants/${tenant?.name}/encryption`,\n            dataSend\n          )\n          .then(() => {\n            setConfirmOpen(false);\n            setUpdatingEncryption(false);\n            fetchEncryptionInfo();\n          })\n          .catch((err: ErrorResponseHandler) => {\n            setUpdatingEncryption(false);\n            setConfirmOpen(false);\n            setErrorSnackMessage(err);\n          });\n      }\n    } else {\n      if (!updatingEncryption) {\n        setUpdatingEncryption(true);\n        api\n          .invoke(\n            \"DELETE\",\n            `/api/v1/namespaces/${tenant?.namespace}/tenants/${tenant?.name}/encryption`,\n            {}\n          )\n          .then(() => {\n            fetchEncryptionInfo();\n            setUpdatingEncryption(false);\n          })\n          .catch((err: ErrorResponseHandler) => {\n            setUpdatingEncryption(false);\n            setErrorSnackMessage(err);\n          });\n      }\n    }\n  };\n\n  return (\n    <React.Fragment>\n      <Fragment>\n        {confirmOpen && (\n          <ConfirmDialog\n            isOpen={confirmOpen}\n            title={\n              encryptionEnabled\n                ? \"Enable encryption at rest for tenant?\"\n                : \"Disable encryption at rest for tenant?\"\n            }\n            confirmText={encryptionEnabled ? \"Enable\" : \"Disable\"}\n            cancelText=\"Cancel\"\n            onClose={() => setConfirmOpen(false)}\n            onConfirm={updateEncryptionConfiguration}\n            confirmationContent={\n              <DialogContentText>\n                {encryptionEnabled\n                  ? \"Data will be encrypted using and external KMS\"\n                  : \"Current encrypted information will not be accessible\"}\n              </DialogContentText>\n            }\n          />\n        )}\n        <Grid container alignItems={\"center\"}>\n          <Grid item xs>\n            <h1 className={classes.sectionTitle}>Encryption</h1>\n          </Grid>\n          <Grid item xs={4} justifyContent={\"end\"} textAlign={\"right\"}>\n            <FormSwitchWrapper\n              label={\"\"}\n              indicatorLabels={[\"Enabled\", \"Disabled\"]}\n              checked={encryptionEnabled}\n              value={\"tenant_encryption\"}\n              id=\"tenant-encryption\"\n              name=\"tenant-encryption\"\n              onChange={(e) => {\n                setEncryptionEnabled(!encryptionEnabled);\n              }}\n              description=\"\"\n            />\n          </Grid>\n        </Grid>\n        {encryptionEnabled && (\n          <Grid container spacing={1}>\n            <Grid item xs={12} className={classes.encryptionTypeOptions}>\n              <RadioGroupSelector\n                currentSelection={encryptionType}\n                id=\"encryptionType\"\n                name=\"encryptionType\"\n                label=\"Encryption Options\"\n                onChange={(e) => {\n                  setEncryptionType(e.target.value);\n                }}\n                selectorOptions={[\n                  { label: \"Vault\", value: \"vault\" },\n                  { label: \"AWS\", value: \"aws\" },\n                  { label: \"Gemalto\", value: \"gemalto\" },\n                  { label: \"GCP\", value: \"gcp\" },\n                  { label: \"Azure\", value: \"azure\" },\n                ]}\n              />\n            </Grid>\n            {encryptionType === \"vault\" && (\n              <Fragment>\n                <Grid item xs={12}>\n                  <InputBoxWrapper\n                    id=\"vault_endpoint\"\n                    name=\"vault_endpoint\"\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                      setVaultConfiguration({\n                        ...vaultConfiguration,\n                        endpoint: e.target.value,\n                      })\n                    }\n                    label=\"Endpoint\"\n                    value={vaultConfiguration?.endpoint || \"\"}\n                    error={validationErrors[\"vault_ping\"] || \"\"}\n                    required\n                  />\n                </Grid>\n                <Grid item xs={12}>\n                  <InputBoxWrapper\n                    id=\"vault_engine\"\n                    name=\"vault_engine\"\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                      setVaultConfiguration({\n                        ...vaultConfiguration,\n                        engine: e.target.value,\n                      })\n                    }\n                    label=\"Engine\"\n                    value={vaultConfiguration?.engine || \"\"}\n                  />\n                </Grid>\n                <Grid item xs={12}>\n                  <InputBoxWrapper\n                    id=\"vault_namespace\"\n                    name=\"vault_namespace\"\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                      setVaultConfiguration({\n                        ...vaultConfiguration,\n                        namespace: e.target.value,\n                      })\n                    }\n                    label=\"Namespace\"\n                    value={vaultConfiguration?.namespace || \"\"}\n                  />\n                </Grid>\n                <Grid item xs={12}>\n                  <InputBoxWrapper\n                    id=\"vault_prefix\"\n                    name=\"vault_prefix\"\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                      setVaultConfiguration({\n                        ...vaultConfiguration,\n                        prefix: e.target.value,\n                      })\n                    }\n                    label=\"Prefix\"\n                    value={vaultConfiguration?.prefix || \"\"}\n                  />\n                </Grid>\n                <Grid item xs={12}>\n                  <Stack>\n                    <StackRow\n                      sx={{\n                        borderBottom: \"1px solid #eaeaea\",\n                        margin: 0,\n                        marginBottom: 1,\n                      }}\n                    >\n                      <h3\n                        style={{\n                          marginBottom: 8,\n                        }}\n                      >\n                        App Role\n                      </h3>\n                    </StackRow>\n                    <Grid container spacing={1}>\n                      <Grid item xs={12}>\n                        <InputBoxWrapper\n                          id=\"vault_approle_engine\"\n                          name=\"vault_approle_engine\"\n                          onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                            setVaultConfiguration({\n                              ...vaultConfiguration,\n                              approle: {\n                                ...vaultConfiguration?.approle,\n                                engine: e.target.value,\n                              },\n                            })\n                          }\n                          label=\"Engine\"\n                          value={vaultConfiguration?.approle?.engine || \"\"}\n                        />\n                      </Grid>\n                      <Grid item xs={12}>\n                        <InputBoxWrapper\n                          type={showVaultAppRoleID ? \"text\" : \"password\"}\n                          id=\"vault_id\"\n                          name=\"vault_id\"\n                          onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                            setVaultConfiguration({\n                              ...vaultConfiguration,\n                              approle: {\n                                ...vaultConfiguration?.approle,\n                                id: e.target.value,\n                              },\n                            })\n                          }\n                          label=\"AppRole ID\"\n                          value={vaultConfiguration?.approle?.id || \"\"}\n                          required\n                          error={validationErrors[\"vault_id\"] || \"\"}\n                          overlayIcon={\n                            showVaultAppRoleID ? (\n                              <VisibilityOffIcon />\n                            ) : (\n                              <RemoveRedEyeIcon />\n                            )\n                          }\n                          overlayAction={() =>\n                            setShowVaultAppRoleID(!showVaultAppRoleID)\n                          }\n                        />\n                      </Grid>\n                      <Grid item xs={12}>\n                        <InputBoxWrapper\n                          type={showVaultAppRoleSecret ? \"text\" : \"password\"}\n                          id=\"vault_secret\"\n                          name=\"vault_secret\"\n                          onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                            setVaultConfiguration({\n                              ...vaultConfiguration,\n                              approle: {\n                                ...vaultConfiguration?.approle,\n                                secret: e.target.value,\n                              },\n                            })\n                          }\n                          label=\"AppRole Secret\"\n                          value={vaultConfiguration?.approle?.secret || \"\"}\n                          required\n                          error={validationErrors[\"vault_secret\"] || \"\"}\n                          overlayIcon={\n                            showVaultAppRoleSecret ? (\n                              <VisibilityOffIcon />\n                            ) : (\n                              <RemoveRedEyeIcon />\n                            )\n                          }\n                          overlayAction={() =>\n                            setShowVaultAppRoleSecret(!showVaultAppRoleSecret)\n                          }\n                        />\n                      </Grid>\n                      <Grid item xs={12}>\n                        <InputBoxWrapper\n                          type=\"number\"\n                          min=\"0\"\n                          id=\"vault_retry\"\n                          name=\"vault_retry\"\n                          onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                            setVaultConfiguration({\n                              ...vaultConfiguration,\n                              approle: {\n                                ...vaultConfiguration?.approle,\n                                retry: e.target.value,\n                              },\n                            })\n                          }\n                          label=\"Retry (Seconds)\"\n                          error={validationErrors[\"vault_retry\"] || \"\"}\n                          value={vaultConfiguration?.approle?.retry || \"\"}\n                        />\n                      </Grid>\n                    </Grid>\n                  </Stack>\n                </Grid>\n                <Grid item xs={12}>\n                  <Stack>\n                    <StackRow\n                      sx={{\n                        borderBottom: \"1px solid #eaeaea\",\n                        margin: 0,\n                        marginBottom: 1,\n                      }}\n                    >\n                      <h3\n                        style={{\n                          marginBottom: 8,\n                        }}\n                      >\n                        Mutual TLS authentication with KMS (optional)\n                      </h3>\n                    </StackRow>\n                    {vaultClientCertificateSecret ? (\n                      <TLSCertificate\n                        certificateInfo={vaultClientCertificateSecret}\n                        onDelete={() =>\n                          removeCertificate(vaultClientCertificateSecret)\n                        }\n                      />\n                    ) : (\n                      <Fragment>\n                        <FileSelector\n                          onChange={(encodedValue, fileName) =>\n                            setVaultClientCertificate({\n                              encoded_key: encodedValue || \"\",\n                              id: vaultClientCertificate?.id || \"\",\n                              key: fileName || \"\",\n                              cert: vaultClientCertificate?.cert || \"\",\n                              encoded_cert:\n                                vaultClientCertificate?.encoded_cert || \"\",\n                            })\n                          }\n                          accept=\".key,.pem\"\n                          id=\"vault_key\"\n                          name=\"vault_key\"\n                          label=\"Key\"\n                          value={vaultClientCertificate?.key || \"\"}\n                        />\n                        <FileSelector\n                          onChange={(encodedValue, fileName) =>\n                            setVaultClientCertificate({\n                              encoded_key:\n                                vaultClientCertificate?.encoded_key || \"\",\n                              id: vaultClientCertificate?.id || \"\",\n                              key: vaultClientCertificate?.key || \"\",\n                              cert: fileName || \"\",\n                              encoded_cert: encodedValue || \"\",\n                            })\n                          }\n                          accept=\".cer,.crt,.cert,.pem\"\n                          id=\"vault_cert\"\n                          name=\"vault_cert\"\n                          label=\"Cert\"\n                          value={vaultClientCertificate?.cert || \"\"}\n                        />\n                      </Fragment>\n                    )}\n                  </Stack>\n                  <fieldset className={classes.fieldGroup}>\n                    <legend className={classes.descriptionText}>\n                      KMS CA certificate (optional)\n                    </legend>\n                    {vaultCACertificateSecret ? (\n                      <TLSCertificate\n                        certificateInfo={vaultCACertificateSecret}\n                        onDelete={() =>\n                          removeCertificate(vaultCACertificateSecret)\n                        }\n                      />\n                    ) : (\n                      <FileSelector\n                        onChange={(encodedValue, fileName) =>\n                          setVaultCACertificate({\n                            encoded_key: vaultCACertificate?.encoded_key || \"\",\n                            id: vaultCACertificate?.id || \"\",\n                            key: vaultCACertificate?.key || \"\",\n                            cert: fileName || \"\",\n                            encoded_cert: encodedValue || \"\",\n                          })\n                        }\n                        accept=\".cer,.crt,.cert,.pem\"\n                        id=\"vault_ca\"\n                        name=\"vault_ca\"\n                        label=\"CA\"\n                        value={vaultCACertificate?.cert || \"\"}\n                      />\n                    )}\n                  </fieldset>\n                </Grid>\n                <Grid item xs={12}>\n                  <Stack>\n                    <StackRow\n                      sx={{\n                        borderBottom: \"1px solid #eaeaea\",\n                        margin: 0,\n                        marginBottom: 1,\n                      }}\n                    >\n                      <h3\n                        style={{\n                          marginBottom: 8,\n                        }}\n                      >\n                        Status\n                      </h3>\n                    </StackRow>\n                    <InputBoxWrapper\n                      type=\"number\"\n                      min=\"0\"\n                      id=\"vault_ping\"\n                      name=\"vault_ping\"\n                      onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                        setVaultConfiguration({\n                          ...vaultConfiguration,\n                          status: {\n                            ...vaultConfiguration?.status,\n                            ping: e.target.value,\n                          },\n                        })\n                      }\n                      label=\"Ping (Seconds)\"\n                      error={validationErrors[\"vault_ping\"] || \"\"}\n                      value={vaultConfiguration?.status?.ping || \"\"}\n                    />\n                  </Stack>\n                </Grid>\n              </Fragment>\n            )}\n            {encryptionType === \"azure\" && (\n              <Fragment>\n                <Grid item xs={12}>\n                  <InputBoxWrapper\n                    id=\"azure_endpoint\"\n                    name=\"azure_endpoint\"\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                      setAzureConfiguration({\n                        ...azureConfiguration,\n                        keyvault: {\n                          ...azureConfiguration?.keyvault,\n                          endpoint: e.target.value,\n                        },\n                      })\n                    }\n                    label=\"Endpoint\"\n                    error={validationErrors[\"azure_endpoint\"] || \"\"}\n                    value={azureConfiguration?.keyvault?.endpoint || \"\"}\n                  />\n                </Grid>\n                <Grid item xs={12}>\n                  <fieldset className={classes.fieldGroup}>\n                    <legend className={classes.descriptionText}>\n                      Credentials\n                    </legend>\n                    <Grid item xs={12}>\n                      <InputBoxWrapper\n                        id=\"azure_tenant_id\"\n                        name=\"azure_tenant_id\"\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                          setAzureConfiguration({\n                            ...azureConfiguration,\n                            keyvault: {\n                              ...azureConfiguration?.keyvault,\n                              credentials: {\n                                ...azureConfiguration?.keyvault?.credentials,\n                                tenant_id: e.target.value,\n                              },\n                            },\n                          })\n                        }\n                        label=\"Tenant ID\"\n                        value={\n                          azureConfiguration?.keyvault?.credentials\n                            ?.tenant_id || \"\"\n                        }\n                        error={validationErrors[\"azure_tenant_id\"] || \"\"}\n                      />\n                    </Grid>\n                    <Grid item xs={12}>\n                      <InputBoxWrapper\n                        id=\"azure_client_id\"\n                        name=\"azure_client_id\"\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                          setAzureConfiguration({\n                            ...azureConfiguration,\n                            keyvault: {\n                              ...azureConfiguration?.keyvault,\n                              credentials: {\n                                ...azureConfiguration?.keyvault?.credentials,\n                                client_id: e.target.value,\n                              },\n                            },\n                          })\n                        }\n                        label=\"Client ID\"\n                        value={\n                          azureConfiguration?.keyvault?.credentials\n                            ?.client_id || \"\"\n                        }\n                        error={validationErrors[\"azure_client_id\"] || \"\"}\n                      />\n                    </Grid>\n                    <Grid item xs={12}>\n                      <InputBoxWrapper\n                        id=\"azure_client_secret\"\n                        name=\"azure_client_secret\"\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                          setAzureConfiguration({\n                            ...azureConfiguration,\n                            keyvault: {\n                              ...azureConfiguration?.keyvault,\n                              credentials: {\n                                ...azureConfiguration?.keyvault?.credentials,\n                                client_secret: e.target.value,\n                              },\n                            },\n                          })\n                        }\n                        label=\"Client Secret\"\n                        value={\n                          azureConfiguration?.keyvault?.credentials\n                            ?.client_secret || \"\"\n                        }\n                        error={validationErrors[\"azure_client_secret\"] || \"\"}\n                      />\n                    </Grid>\n                  </fieldset>\n                </Grid>\n              </Fragment>\n            )}\n            {encryptionType === \"gcp\" && (\n              <Fragment>\n                <Grid item xs={12}>\n                  <InputBoxWrapper\n                    id=\"gcp_project_id\"\n                    name=\"gcp_project_id\"\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                      setGCPConfiguration({\n                        ...gcpConfiguration,\n                        secretmanager: {\n                          ...gcpConfiguration?.secretmanager,\n                          project_id: e.target.value,\n                        },\n                      })\n                    }\n                    label=\"Project ID\"\n                    value={gcpConfiguration?.secretmanager.project_id || \"\"}\n                  />\n                </Grid>\n                <Grid item xs={12}>\n                  <InputBoxWrapper\n                    id=\"gcp_endpoint\"\n                    name=\"gcp_endpoint\"\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                      setGCPConfiguration({\n                        ...gcpConfiguration,\n                        secretmanager: {\n                          ...gcpConfiguration?.secretmanager,\n                          endpoint: e.target.value,\n                        },\n                      })\n                    }\n                    label=\"Endpoint\"\n                    value={gcpConfiguration?.secretmanager.endpoint || \"\"}\n                  />\n                </Grid>\n                <Grid item xs={12}>\n                  <fieldset className={classes.fieldGroup}>\n                    <legend className={classes.descriptionText}>\n                      Credentials\n                    </legend>\n                    <Grid item xs={12}>\n                      <InputBoxWrapper\n                        id=\"gcp_client_email\"\n                        name=\"gcp_client_email\"\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                          setGCPConfiguration({\n                            ...gcpConfiguration,\n                            secretmanager: {\n                              ...gcpConfiguration?.secretmanager,\n                              credentials: {\n                                ...gcpConfiguration?.secretmanager.credentials,\n                                client_email: e.target.value,\n                              },\n                            },\n                          })\n                        }\n                        label=\"Client Email\"\n                        value={\n                          gcpConfiguration?.secretmanager.credentials\n                            ?.client_email || \"\"\n                        }\n                      />\n                    </Grid>\n                    <Grid item xs={12}>\n                      <InputBoxWrapper\n                        id=\"gcp_client_id\"\n                        name=\"gcp_client_id\"\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                          setGCPConfiguration({\n                            ...gcpConfiguration,\n                            secretmanager: {\n                              ...gcpConfiguration?.secretmanager,\n                              credentials: {\n                                ...gcpConfiguration?.secretmanager.credentials,\n                                client_id: e.target.value,\n                              },\n                            },\n                          })\n                        }\n                        label=\"Client ID\"\n                        value={\n                          gcpConfiguration?.secretmanager.credentials\n                            ?.client_id || \"\"\n                        }\n                      />\n                    </Grid>\n                    <Grid item xs={12}>\n                      <InputBoxWrapper\n                        id=\"gcp_private_key_id\"\n                        name=\"gcp_private_key_id\"\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                          setGCPConfiguration({\n                            ...gcpConfiguration,\n                            secretmanager: {\n                              ...gcpConfiguration?.secretmanager,\n                              credentials: {\n                                ...gcpConfiguration?.secretmanager.credentials,\n                                private_key_id: e.target.value,\n                              },\n                            },\n                          })\n                        }\n                        label=\"Private Key ID\"\n                        value={\n                          gcpConfiguration?.secretmanager.credentials\n                            ?.private_key_id || \"\"\n                        }\n                      />\n                    </Grid>\n                    <Grid item xs={12}>\n                      <InputBoxWrapper\n                        id=\"gcp_private_key\"\n                        name=\"gcp_private_key\"\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                          setGCPConfiguration({\n                            ...gcpConfiguration,\n                            secretmanager: {\n                              ...gcpConfiguration?.secretmanager,\n                              credentials: {\n                                ...gcpConfiguration?.secretmanager.credentials,\n                                private_key: e.target.value,\n                              },\n                            },\n                          })\n                        }\n                        label=\"Private Key\"\n                        value={\n                          gcpConfiguration?.secretmanager.credentials\n                            ?.private_key || \"\"\n                        }\n                      />\n                    </Grid>\n                  </fieldset>\n                </Grid>\n              </Fragment>\n            )}\n            {encryptionType === \"aws\" && (\n              <Fragment>\n                <Grid item xs={12}>\n                  <InputBoxWrapper\n                    id=\"aws_endpoint\"\n                    name=\"aws_endpoint\"\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                      setAWSConfiguration({\n                        ...awsConfiguration,\n                        secretsmanager: {\n                          ...awsConfiguration?.secretsmanager,\n                          endpoint: e.target.value,\n                        },\n                      })\n                    }\n                    label=\"Endpoint\"\n                    value={awsConfiguration?.secretsmanager?.endpoint || \"\"}\n                    required\n                    error={validationErrors[\"aws_endpoint\"] || \"\"}\n                  />\n                </Grid>\n                <Grid item xs={12}>\n                  <InputBoxWrapper\n                    id=\"aws_region\"\n                    name=\"aws_region\"\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                      setAWSConfiguration({\n                        ...awsConfiguration,\n                        secretsmanager: {\n                          ...awsConfiguration?.secretsmanager,\n                          region: e.target.value,\n                        },\n                      })\n                    }\n                    label=\"Region\"\n                    value={awsConfiguration?.secretsmanager?.region || \"\"}\n                    error={validationErrors[\"aws_region\"] || \"\"}\n                    required\n                  />\n                </Grid>\n                <Grid item xs={12}>\n                  <InputBoxWrapper\n                    id=\"aws_kmsKey\"\n                    name=\"aws_kmsKey\"\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                      setAWSConfiguration({\n                        ...awsConfiguration,\n                        secretsmanager: {\n                          ...awsConfiguration?.secretsmanager,\n                          kmskey: e.target.value,\n                        },\n                      })\n                    }\n                    label=\"KMS Key\"\n                    value={awsConfiguration?.secretsmanager?.kmskey || \"\"}\n                  />\n                </Grid>\n                <Grid item xs={12}>\n                  <fieldset className={classes.fieldGroup}>\n                    <legend className={classes.descriptionText}>\n                      Credentials\n                    </legend>\n                    <Grid item xs={12}>\n                      <InputBoxWrapper\n                        id=\"aws_accessKey\"\n                        name=\"aws_accessKey\"\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                          setAWSConfiguration({\n                            ...awsConfiguration,\n                            secretsmanager: {\n                              ...awsConfiguration?.secretsmanager,\n                              credentials: {\n                                ...awsConfiguration?.secretsmanager\n                                  ?.credentials,\n                                accesskey: e.target.value,\n                              },\n                            },\n                          })\n                        }\n                        label=\"Access Key\"\n                        value={\n                          awsConfiguration?.secretsmanager?.credentials\n                            ?.accesskey || \"\"\n                        }\n                        error={validationErrors[\"aws_accessKey\"] || \"\"}\n                        required\n                      />\n                    </Grid>\n                    <Grid item xs={12}>\n                      <InputBoxWrapper\n                        id=\"aws_secretKey\"\n                        name=\"aws_secretKey\"\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                          setAWSConfiguration({\n                            ...awsConfiguration,\n                            secretsmanager: {\n                              ...awsConfiguration?.secretsmanager,\n                              credentials: {\n                                ...awsConfiguration?.secretsmanager\n                                  ?.credentials,\n                                secretkey: e.target.value,\n                              },\n                            },\n                          })\n                        }\n                        label=\"Secret Key\"\n                        value={\n                          awsConfiguration?.secretsmanager?.credentials\n                            ?.secretkey || \"\"\n                        }\n                        error={validationErrors[\"aws_secretKey\"] || \"\"}\n                        required\n                      />\n                    </Grid>\n                    <Grid item xs={12}>\n                      <InputBoxWrapper\n                        id=\"aws_token\"\n                        name=\"aws_token\"\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                          setAWSConfiguration({\n                            ...awsConfiguration,\n                            secretsmanager: {\n                              ...awsConfiguration?.secretsmanager,\n                              credentials: {\n                                ...awsConfiguration?.secretsmanager\n                                  ?.credentials,\n                                token: e.target.value,\n                              },\n                            },\n                          })\n                        }\n                        label=\"Token\"\n                        value={\n                          awsConfiguration?.secretsmanager?.credentials\n                            ?.token || \"\"\n                        }\n                      />\n                    </Grid>\n                  </fieldset>\n                </Grid>\n              </Fragment>\n            )}\n            {encryptionType === \"gemalto\" && (\n              <Fragment>\n                <Grid item xs={12}>\n                  <InputBoxWrapper\n                    id=\"gemalto_endpoint\"\n                    name=\"gemalto_endpoint\"\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                      setGemaltoConfiguration({\n                        ...gemaltoConfiguration,\n                        keysecure: {\n                          ...gemaltoConfiguration?.keysecure,\n                          endpoint: e.target.value,\n                        },\n                      })\n                    }\n                    label=\"Endpoint\"\n                    value={gemaltoConfiguration?.keysecure?.endpoint || \"\"}\n                    error={validationErrors[\"gemalto_endpoint\"] || \"\"}\n                    required\n                  />\n                </Grid>\n                <Grid\n                  item\n                  xs={12}\n                  style={{\n                    marginBottom: 15,\n                  }}\n                >\n                  <fieldset className={classes.fieldGroup}>\n                    <legend className={classes.descriptionText}>\n                      Credentials\n                    </legend>\n                    <Grid item xs={12}>\n                      <InputBoxWrapper\n                        id=\"gemalto_token\"\n                        name=\"gemalto_token\"\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                          setGemaltoConfiguration({\n                            ...gemaltoConfiguration,\n                            keysecure: {\n                              ...gemaltoConfiguration?.keysecure,\n                              credentials: {\n                                ...gemaltoConfiguration?.keysecure?.credentials,\n                                token: e.target.value,\n                              },\n                            },\n                          })\n                        }\n                        label=\"Token\"\n                        value={\n                          gemaltoConfiguration?.keysecure?.credentials?.token ||\n                          \"\"\n                        }\n                        error={validationErrors[\"gemalto_token\"] || \"\"}\n                        required\n                      />\n                    </Grid>\n                    <Grid item xs={12}>\n                      <InputBoxWrapper\n                        id=\"gemalto_domain\"\n                        name=\"gemalto_domain\"\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                          setGemaltoConfiguration({\n                            ...gemaltoConfiguration,\n                            keysecure: {\n                              ...gemaltoConfiguration?.keysecure,\n                              credentials: {\n                                ...gemaltoConfiguration?.keysecure?.credentials,\n                                domain: e.target.value,\n                              },\n                            },\n                          })\n                        }\n                        label=\"Domain\"\n                        value={\n                          gemaltoConfiguration?.keysecure?.credentials\n                            ?.domain || \"\"\n                        }\n                        error={validationErrors[\"gemalto_domain\"] || \"\"}\n                        required\n                      />\n                    </Grid>\n                    <Grid item xs={12}>\n                      <InputBoxWrapper\n                        type=\"number\"\n                        min=\"0\"\n                        id=\"gemalto_retry\"\n                        name=\"gemalto_retry\"\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                          setGemaltoConfiguration({\n                            ...gemaltoConfiguration,\n                            keysecure: {\n                              ...gemaltoConfiguration?.keysecure,\n                              credentials: {\n                                ...gemaltoConfiguration?.keysecure?.credentials,\n                                retry: e.target.value,\n                              },\n                            },\n                          })\n                        }\n                        label=\"Retry (seconds)\"\n                        value={\n                          gemaltoConfiguration?.keysecure?.credentials?.retry ||\n                          \"\"\n                        }\n                        error={validationErrors[\"gemalto_retry\"] || \"\"}\n                      />\n                    </Grid>\n                  </fieldset>\n                </Grid>\n                <Grid\n                  item\n                  xs={12}\n                  style={{\n                    marginBottom: 15,\n                  }}\n                >\n                  <fieldset className={classes.fieldGroup}>\n                    <legend className={classes.descriptionText}>\n                      Custom CA Root certificate verification\n                    </legend>\n                    <FileSelector\n                      onChange={(encodedValue, fileName) => {}}\n                      accept=\".cer,.crt,.cert,.pem\"\n                      id=\"gemalto_ca\"\n                      name=\"gemalto_ca\"\n                      label=\"CA\"\n                      value={\"\"}\n                    />\n                    {gemaltoCACertificateSecret ? (\n                      <TLSCertificate\n                        certificateInfo={gemaltoCACertificateSecret}\n                        onDelete={() =>\n                          removeCertificate(gemaltoCACertificateSecret)\n                        }\n                      />\n                    ) : (\n                      <FileSelector\n                        onChange={(encodedValue, fileName) =>\n                          setGemaltotCACertificate({\n                            encoded_key:\n                              gemaltoCACertificate?.encoded_key || \"\",\n                            id: gemaltoCACertificate?.id || \"\",\n                            key: gemaltoCACertificate?.key || \"\",\n                            cert: fileName || \"\",\n                            encoded_cert: encodedValue || \"\",\n                          })\n                        }\n                        accept=\".cer,.crt,.cert,.pem\"\n                        id=\"gemalto_ca\"\n                        name=\"gemalto_ca\"\n                        label=\"CA\"\n                        value={gemaltoCACertificate?.cert || \"\"}\n                      />\n                    )}\n                  </fieldset>\n                </Grid>\n              </Fragment>\n            )}\n            <Grid item xs={12}>\n              <Stack>\n                <StackRow\n                  sx={{\n                    borderBottom: \"1px solid #eaeaea\",\n                    margin: 0,\n                    marginBottom: 1,\n                  }}\n                >\n                  <h3\n                    style={{\n                      marginBottom: 8,\n                    }}\n                  >\n                    Additional Configurations\n                  </h3>\n                </StackRow>\n\n                <FormSwitchWrapper\n                  value=\"enableCustomCertsForKES\"\n                  id=\"enableCustomCertsForKES\"\n                  name=\"enableCustomCertsForKES\"\n                  checked={enabledCustomCertificates}\n                  onChange={(e) =>\n                    setEnabledCustomCertificates(!enabledCustomCertificates)\n                  }\n                  label={\"Custom Certificates\"}\n                />\n              </Stack>\n            </Grid>\n            {enabledCustomCertificates && (\n              <Fragment>\n                <Grid item xs={12}>\n                  <fieldset className={classes.fieldGroup}>\n                    <legend className={classes.descriptionText}>\n                      Encryption Service Certificates\n                    </legend>\n                    {serverTLSCertificateSecret ? (\n                      <TLSCertificate\n                        certificateInfo={serverTLSCertificateSecret}\n                        onDelete={() =>\n                          removeCertificate(serverTLSCertificateSecret)\n                        }\n                      />\n                    ) : (\n                      <Fragment>\n                        <FileSelector\n                          onChange={(encodedValue, fileName) => {\n                            setServerCertificate({\n                              encoded_key: encodedValue || \"\",\n                              id: serverCertificate?.id || \"\",\n                              key: fileName || \"\",\n                              cert: serverCertificate?.cert || \"\",\n                              encoded_cert:\n                                serverCertificate?.encoded_cert || \"\",\n                            });\n                            cleanValidation(\"serverKey\");\n                          }}\n                          accept=\".key,.pem\"\n                          id=\"serverKey\"\n                          name=\"serverKey\"\n                          label=\"Key\"\n                          value={serverCertificate?.key}\n                        />\n                        <FileSelector\n                          onChange={(encodedValue, fileName) => {\n                            setServerCertificate({\n                              encoded_key: serverCertificate?.encoded_key || \"\",\n                              id: serverCertificate?.id || \"\",\n                              key: serverCertificate?.key || \"\",\n                              cert: fileName || \"\",\n                              encoded_cert: encodedValue || \"\",\n                            });\n                            cleanValidation(\"serverCert\");\n                          }}\n                          accept=\".cer,.crt,.cert,.pem\"\n                          id=\"serverCert\"\n                          name=\"serverCert\"\n                          label=\"Cert\"\n                          value={serverCertificate?.cert}\n                        />\n                      </Fragment>\n                    )}\n                  </fieldset>\n                </Grid>\n                <Grid container spacing={1} style={{ marginBottom: 15 }}>\n                  <Grid item xs={12}>\n                    <Stack>\n                      <StackRow\n                        sx={{\n                          borderBottom: \"1px solid #eaeaea\",\n                          margin: 0,\n                          marginBottom: 1,\n                        }}\n                      >\n                        Mutual TLS authentication with MinIO\n                      </StackRow>\n                      {mTLSCertificateSecret ? (\n                        <TLSCertificate\n                          certificateInfo={mTLSCertificateSecret}\n                          onDelete={() =>\n                            removeCertificate(mTLSCertificateSecret)\n                          }\n                        />\n                      ) : (\n                        <Fragment>\n                          <FileSelector\n                            onChange={(encodedValue, fileName) => {\n                              setMTLSCertificate({\n                                encoded_key: encodedValue || \"\",\n                                id: mTLSCertificate?.id || \"\",\n                                key: fileName || \"\",\n                                cert: mTLSCertificate?.cert || \"\",\n                                encoded_cert:\n                                  mTLSCertificate?.encoded_cert || \"\",\n                              });\n                              cleanValidation(\"clientKey\");\n                            }}\n                            accept=\".key,.pem\"\n                            id=\"clientKey\"\n                            name=\"clientKey\"\n                            label=\"Key\"\n                            value={mTLSCertificate?.key}\n                          />\n                          <FileSelector\n                            onChange={(encodedValue, fileName) => {\n                              setMTLSCertificate({\n                                encoded_key: mTLSCertificate?.encoded_key || \"\",\n                                id: mTLSCertificate?.id || \"\",\n                                key: mTLSCertificate?.key || \"\",\n                                cert: fileName || \"\",\n                                encoded_cert: encodedValue || \"\",\n                              });\n                              cleanValidation(\"clientCert\");\n                            }}\n                            accept=\".cer,.crt,.cert,.pem\"\n                            id=\"clientCert\"\n                            name=\"clientCert\"\n                            label=\"Cert\"\n                            value={mTLSCertificate?.cert}\n                          />\n                        </Fragment>\n                      )}\n                    </Stack>\n                  </Grid>\n                </Grid>\n              </Fragment>\n            )}\n            <Grid item xs={12}>\n              <InputBoxWrapper\n                type=\"text\"\n                id=\"image\"\n                name=\"image\"\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                  setImage(e.target.value)\n                }\n                label=\"Image\"\n                placeholder=\"minio/kes:v0.17.6\"\n                value={image}\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <InputBoxWrapper\n                type=\"number\"\n                min=\"1\"\n                id=\"replicas\"\n                name=\"replicas\"\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                  setReplicas(e.target.value)\n                }\n                label=\"Replicas\"\n                value={replicas}\n                required\n                error={validationErrors[\"replicas\"] || \"\"}\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <Stack>\n                <StackRow\n                  sx={{\n                    borderBottom: \"1px solid #eaeaea\",\n                    margin: 0,\n                    marginBottom: 1,\n                  }}\n                >\n                  <h3\n                    style={{\n                      marginBottom: 10,\n                    }}\n                  >\n                    SecurityContext for KES pods\n                  </h3>\n                </StackRow>\n                <Grid item xs={12} className={classes.kesSecurityContext}>\n                  <div\n                    className={`${classes.multiContainer} ${classes.responsiveContainer}`}\n                  >\n                    <div\n                      className={`${classes.formFieldRow} ${classes.rightSpacer}`}\n                    >\n                      <InputBoxWrapper\n                        type=\"number\"\n                        id=\"kes_securityContext_runAsUser\"\n                        name=\"kes_securityContext_runAsUser\"\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                          setSecurityContext({\n                            ...securityContext,\n                            runAsUser: e.target.value,\n                          });\n                        }}\n                        label=\"Run As User\"\n                        value={securityContext.runAsUser}\n                        required\n                        error={\n                          validationErrors[\"kes_securityContext_runAsUser\"] ||\n                          \"\"\n                        }\n                        min=\"0\"\n                      />\n                    </div>\n                    <div\n                      className={`${classes.formFieldRow} ${classes.rightSpacer}`}\n                    >\n                      <InputBoxWrapper\n                        type=\"number\"\n                        id=\"kes_securityContext_runAsGroup\"\n                        name=\"kes_securityContext_runAsGroup\"\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                          setSecurityContext({\n                            ...securityContext,\n                            runAsGroup: e.target.value,\n                          });\n                        }}\n                        label=\"Run As Group\"\n                        value={securityContext.runAsGroup}\n                        required\n                        error={\n                          validationErrors[\"kes_securityContext_runAsGroup\"] ||\n                          \"\"\n                        }\n                        min=\"0\"\n                      />\n                    </div>\n                    <div\n                      className={`${classes.formFieldRow} ${classes.rightSpacer}`}\n                    >\n                      <InputBoxWrapper\n                        type=\"number\"\n                        id=\"kes_securityContext_fsGroup\"\n                        name=\"kes_securityContext_fsGroup\"\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                          setSecurityContext({\n                            ...securityContext,\n                            fsGroup: e.target.value,\n                          });\n                        }}\n                        label=\"FsGroup\"\n                        value={securityContext.fsGroup}\n                        required\n                        error={\n                          validationErrors[\"kes_securityContext_fsGroup\"] || \"\"\n                        }\n                        min=\"0\"\n                      />\n                    </div>\n                  </div>\n                </Grid>\n                <br />\n                <Grid item xs={12}>\n                  <FormSwitchWrapper\n                    value=\"kesSecurityContextRunAsNonRoot\"\n                    id=\"kes_securityContext_runAsNonRoot\"\n                    name=\"kes_securityContext_runAsNonRoot\"\n                    checked={securityContext.runAsNonRoot}\n                    onChange={(e) => {\n                      const targetD = e.target;\n                      const checked = targetD.checked;\n                      setSecurityContext({\n                        ...securityContext,\n                        runAsNonRoot: checked,\n                      });\n                    }}\n                    label={\"Do not run as Root\"}\n                  />\n                </Grid>\n              </Stack>\n            </Grid>\n          </Grid>\n        )}\n        <Grid item xs={12} className={classes.buttonContainer}>\n          <Button\n            type=\"submit\"\n            variant=\"contained\"\n            color=\"primary\"\n            disabled={!isFormValid}\n            onClick={() => setConfirmOpen(true)}\n          >\n            Save\n          </Button>\n        </Grid>\n      </Fragment>\n    </React.Fragment>\n  );\n};\n\nconst mapState = (state: AppState) => ({\n  loadingTenant: state.tenants.tenantDetails.loadingTenant,\n  selectedTenant: state.tenants.tenantDetails.currentTenant,\n  tenant: state.tenants.tenantDetails.tenantInfo,\n});\n\nconst mapDispatchToProps = {\n  setErrorSnackMessage,\n  setTenantDetailsLoad,\n};\n\nconst connector = connect(mapState, mapDispatchToProps);\n\nexport default withStyles(styles)(connector(TenantEncryption));\n","import React from \"react\";\nimport Typography from \"@mui/material/Typography\";\nimport { Theme } from \"@mui/material/styles\";\n\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    errorBlock: {\n      color: theme.palette?.error.main || \"#C83B51\",\n    },\n  });\n\ninterface IErrorBlockProps {\n  classes: any;\n  errorMessage: string;\n  withBreak?: boolean;\n}\n\nconst ErrorBlock = ({\n  classes,\n  errorMessage,\n  withBreak = true,\n}: IErrorBlockProps) => {\n  return (\n    <React.Fragment>\n      {withBreak && <br />}\n      <Typography component=\"p\" variant=\"body1\" className={classes.errorBlock}>\n        {errorMessage}\n      </Typography>\n    </React.Fragment>\n  );\n};\n\nexport default withStyles(styles)(ErrorBlock);\n","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _jsxRuntime = require(\"react/jsx-runtime\");\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M12 4.5C7 4.5 2.73 7.61 1 12c1.73 4.39 6 7.5 11 7.5s9.27-3.11 11-7.5c-1.73-4.39-6-7.5-11-7.5zM12 17c-2.76 0-5-2.24-5-5s2.24-5 5-5 5 2.24 5 5-2.24 5-5 5zm0-8c-1.66 0-3 1.34-3 3s1.34 3 3 3 3-1.34 3-3-1.34-3-3-3z\"\n}), 'RemoveRedEye');\n\nexports.default = _default;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _jsxRuntime = require(\"react/jsx-runtime\");\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M12 7c2.76 0 5 2.24 5 5 0 .65-.13 1.26-.36 1.83l2.92 2.92c1.51-1.26 2.7-2.89 3.43-4.75-1.73-4.39-6-7.5-11-7.5-1.4 0-2.74.25-3.98.7l2.16 2.16C10.74 7.13 11.35 7 12 7zM2 4.27l2.28 2.28.46.46C3.08 8.3 1.78 10.02 1 12c1.73 4.39 6 7.5 11 7.5 1.55 0 3.03-.3 4.38-.84l.42.42L19.73 22 21 20.73 3.27 3 2 4.27zM7.53 9.8l1.55 1.55c-.05.21-.08.43-.08.65 0 1.66 1.34 3 3 3 .22 0 .44-.03.65-.08l1.55 1.55c-.67.33-1.41.53-2.2.53-2.76 0-5-2.24-5-5 0-.79.2-1.53.53-2.2zm4.31-.78 3.15 3.15.02-.16c0-1.66-1.34-3-3-3l-.17.01z\"\n}), 'VisibilityOff');\n\nexports.default = _default;","import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"component\", \"direction\", \"spacing\", \"divider\", \"children\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { createUnarySpacing, getValue, handleBreakpoints, unstable_extendSxProp as extendSxProp, unstable_resolveBreakpointValues as resolveBreakpointValues } from '@mui/system';\nimport { deepmerge } from '@mui/utils';\nimport styled from '../styles/styled';\nimport useThemeProps from '../styles/useThemeProps';\n/**\n * Return an array with the separator React element interspersed between\n * each React node of the input children.\n *\n * > joinChildren([1,2,3], 0)\n * [1,0,2,0,3]\n */\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction joinChildren(children, separator) {\n  const childrenArray = React.Children.toArray(children).filter(Boolean);\n  return childrenArray.reduce((output, child, index) => {\n    output.push(child);\n\n    if (index < childrenArray.length - 1) {\n      output.push( /*#__PURE__*/React.cloneElement(separator, {\n        key: `separator-${index}`\n      }));\n    }\n\n    return output;\n  }, []);\n}\n\nconst getSideFromDirection = direction => {\n  return {\n    row: 'Left',\n    'row-reverse': 'Right',\n    column: 'Top',\n    'column-reverse': 'Bottom'\n  }[direction];\n};\n\nexport const style = ({\n  ownerState,\n  theme\n}) => {\n  let styles = _extends({\n    display: 'flex'\n  }, handleBreakpoints({\n    theme\n  }, resolveBreakpointValues({\n    values: ownerState.direction,\n    breakpoints: theme.breakpoints.values\n  }), propValue => ({\n    flexDirection: propValue\n  })));\n\n  if (ownerState.spacing) {\n    const transformer = createUnarySpacing(theme);\n    const base = Object.keys(theme.breakpoints.values).reduce((acc, breakpoint) => {\n      if (ownerState.spacing[breakpoint] != null || ownerState.direction[breakpoint] != null) {\n        acc[breakpoint] = true;\n      }\n\n      return acc;\n    }, {});\n    const directionValues = resolveBreakpointValues({\n      values: ownerState.direction,\n      base\n    });\n    const spacingValues = resolveBreakpointValues({\n      values: ownerState.spacing,\n      base\n    });\n\n    const styleFromPropValue = (propValue, breakpoint) => {\n      return {\n        '& > :not(style) + :not(style)': {\n          margin: 0,\n          [`margin${getSideFromDirection(breakpoint ? directionValues[breakpoint] : ownerState.direction)}`]: getValue(transformer, propValue)\n        }\n      };\n    };\n\n    styles = deepmerge(styles, handleBreakpoints({\n      theme\n    }, spacingValues, styleFromPropValue));\n  }\n\n  return styles;\n};\nconst StackRoot = styled('div', {\n  name: 'MuiStack',\n  slot: 'Root',\n  overridesResolver: (props, styles) => {\n    return [styles.root];\n  }\n})(style);\nconst Stack = /*#__PURE__*/React.forwardRef(function Stack(inProps, ref) {\n  const themeProps = useThemeProps({\n    props: inProps,\n    name: 'MuiStack'\n  });\n  const props = extendSxProp(themeProps);\n\n  const {\n    component = 'div',\n    direction = 'column',\n    spacing = 0,\n    divider,\n    children\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const ownerState = {\n    direction,\n    spacing\n  };\n  return /*#__PURE__*/_jsx(StackRoot, _extends({\n    as: component,\n    ownerState: ownerState,\n    ref: ref\n  }, other, {\n    children: divider ? joinChildren(children, divider) : children\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? Stack.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n\n  /**\n   * Defines the `flex-direction` style property.\n   * It is applied for all screen sizes.\n   * @default 'column'\n   */\n  direction: PropTypes.oneOfType([PropTypes.oneOf(['column-reverse', 'column', 'row-reverse', 'row']), PropTypes.arrayOf(PropTypes.oneOf(['column-reverse', 'column', 'row-reverse', 'row'])), PropTypes.object]),\n\n  /**\n   * Add an element between each child.\n   */\n  divider: PropTypes.node,\n\n  /**\n   * Defines the space between immediate children.\n   * @default 0\n   */\n  spacing: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.number, PropTypes.string])), PropTypes.number, PropTypes.object, PropTypes.string]),\n\n  /**\n   * The system prop, which allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default Stack;"],"names":["withStyles","theme","createStyles","fieldBasic","tooltipHelper","valueString","maxWidth","whiteSpace","overflow","textOverflow","marginTop","fileInputField","margin","flexFlow","fileInputStyles","inputLabel","fontWeight","textBoxContainer","border","paddingLeft","label","classes","onChange","id","name","disabled","tooltip","required","error","accept","value","useState","showFileSelector","setShowSelector","Grid","item","xs","className","fieldBottom","fieldContainer","errorInField","InputLabel","htmlFor","fieldLabelError","tooltipContainer","Tooltip","title","placement","HelpIcon","type","e","fileName","get","evt","callback","file","target","files","reader","FileReader","readAsDataURL","onload","fileBase64","result","fileArray","toString","split","length","fileProcess","data","IconButton","color","component","onClick","disableRipple","disableFocusRipple","size","Cancel","ErrorBlock","errorMessage","fileReselect","AttachFile","radioStyles","makeStyles","root","backgroundColor","radioIcons","RadioButton","props","checkedIcon","radioSelectedIcon","icon","radioUnselectedIcon","optionLabel","marginRight","fontSize","checkedOption","selectorOptions","currentSelection","disableOptions","displayInColumn","container","alignItems","radioOptionsLayout","row","style","display","textAlign","map","selectorOption","control","clsx","deleteDialogStyles","isOpen","onClose","onCancel","onConfirm","isLoading","confirmationContent","cancelText","confirmText","confirmButtonProps","cancelButtonProps","titleIcon","open","event","reason","sx","padding","titleText","closeContainer","closeButton","content","actions","cancelButton","variant","confirmButton","loading","loadingPosition","startIcon","autoFocus","xmlns","fill","viewBox","d","transform","clipPath","textDecoration","cursor","palette","info","main","fontFamily","certificateIcon","float","paddingTop","paddingRight","certificateInfo","certificateWrapper","height","userSelect","borderRadius","certificateExpiry","flexWrap","marginBottom","certificateDomains","certificatesList","textTransform","overflowY","maxHeight","certificatesListItem","borderBottom","minWidth","opacity","onDelete","certificates","domains","Chip","Container","Typography","gutterBottom","Box","EventBusy","format","expiry","Divider","List","dom","ListItem","ListItemAvatar","Language","ListItemText","primary","children","restProps","direction","sm","justifyContent","spacing","md","mapDispatchToProps","setErrorSnackMessage","setTenantDetailsLoad","connector","connect","state","loadingTenant","tenants","tenantDetails","selectedTenant","currentTenant","tenant","tenantInfo","tenantDetailsStyles","spacingUtils","loaderAlign","bold","italic","fontStyle","paperContainer","fileItem","certInputRow","caCertsRow","containerForHeader","createTenantCommon","formFieldStyles","modalBasic","wizardCommon","encryptionEnabled","setEncryptionEnabled","encryptionType","setEncryptionType","replicas","setReplicas","image","setImage","refreshEncryptionInfo","setRefreshEncryptionInfo","fsGroup","runAsGroup","runAsNonRoot","runAsUser","securityContext","setSecurityContext","vaultConfiguration","setVaultConfiguration","awsConfiguration","setAWSConfiguration","gemaltoConfiguration","setGemaltoConfiguration","azureConfiguration","setAzureConfiguration","gcpConfiguration","setGCPConfiguration","enabledCustomCertificates","setEnabledCustomCertificates","updatingEncryption","setUpdatingEncryption","serverTLSCertificateSecret","setServerTLSCertificateSecret","mTLSCertificateSecret","setMTLSCertificateSecret","mTLSCertificate","setMTLSCertificate","certificatesToBeRemoved","setCertificatesToBeRemoved","showVaultAppRoleID","setShowVaultAppRoleID","isFormValid","setIsFormValid","showVaultAppRoleSecret","setShowVaultAppRoleSecret","vaultClientCertificateSecret","setVaultClientCertificateSecret","vaultCACertificateSecret","setVaultCACertificateSecret","vaultClientCertificate","setVaultClientCertificate","serverCertificate","setServerCertificate","vaultCACertificate","setVaultCACertificate","gemaltoCACertificateSecret","setGemaltoCACertificateSecret","gemaltoCACertificate","setGemaltotCACertificate","validationErrors","setValidationErrors","cleanValidation","fieldName","clearValidationError","confirmOpen","setConfirmOpen","useEffect","encryptionValidation","fieldKey","customValidation","parseInt","customValidationMessage","encoded_key","encoded_cert","endpoint","approle","secret","status","ping","retry","secretsmanager","region","credentials","accesskey","secretkey","keysecure","token","domain","keyvault","tenant_id","client_id","client_secret","commonVal","commonFormValidation","Object","keys","fetchEncryptionInfo","api","namespace","then","resp","vault","tls","crt","ca","aws","gemalto","gcp","azure","server","mtls_client","catch","err","console","log","removeCertificate","Fragment","insertEncrypt","gemaltoCAIntroduce","kmskey","secretmanager","project_id","client_email","private_key_id","private_key","vaultKeyPair","vaultCAInsert","key","vaultTLS","engine","prefix","encryptionServerKeyPair","encryptionClientKeyPair","client","dataSend","secretsToBeDeleted","sectionTitle","indicatorLabels","checked","description","encryptionTypeOptions","overlayIcon","overlayAction","min","encodedValue","cert","fieldGroup","descriptionText","placeholder","kesSecurityContext","multiContainer","responsiveContainer","formFieldRow","rightSpacer","buttonContainer","errorBlock","withBreak","_interopRequireDefault","require","exports","_createSvgIcon","_jsxRuntime","_default","default","jsx","_excluded","joinChildren","separator","childrenArray","React","filter","Boolean","reduce","output","child","index","push","StackRoot","styled","slot","overridesResolver","styles","ownerState","_extends","handleBreakpoints","resolveBreakpointValues","values","breakpoints","propValue","flexDirection","transformer","createUnarySpacing","base","acc","breakpoint","directionValues","spacingValues","deepmerge","column","getValue","Stack","inProps","ref","themeProps","useThemeProps","extendSxProp","divider","other","_objectWithoutPropertiesLoose","_jsx","as"],"sourceRoot":""}